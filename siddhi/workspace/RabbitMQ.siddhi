@App:name('RabbitMQ')
@App:description('Trackers COVID 19 Cases')
@App:statistics(reporter = "console")

@source(type = 'rabbitmq', uri = "amqp://student:student01@128.163.202.61/patient_feed", exchange.name = "patient_data", exchange.type = "topic", routing.key = "patient.info", 
	@map(type = 'json'))
define stream PatientStream (first_name string, last_name string, mrn string, zip_code string, patient_status_code string);

@store(type = 'rdbms', jdbc.url = "jdbc:mysql://sam246.cs.uky.edu:3306/database?useSSL=False",
username = "root",password = "password",jdbc.driver.name = "com.mysql.jdbc.Driver",table.name = "zip_alert")@index("zipcode")
define table ZipAlert (zipcode string, current_count long, on_alert bool);

@store(type = 'rdbms', jdbc.url = "jdbc:mysql://sam246.cs.uky.edu:3306/database?useSSL=False",
username = "root",password = "password",jdbc.driver.name = "com.mysql.jdbc.Driver",table.name = "patient_data")@index("mrn")
define table Patient (mrn string, location_code string, is_positive bool);

@store(type = 'rdbms', datasource='DATABASE')
@index("hospital_id")
define table hospital_data (hospital_id string, hospital_zip string);

@info(name = 'ZipAlertWindowQuery')
from PatientStream#window.timeBatch(15 sec) 
select zip_code as zipcode, count() as count 
	group by zip_code 
insert into ZipAlertInsertOrUpdateStream;

 
 
@info(name = 'TestedPatientsStayHome')
from PatientStream[patient_status_code == '1' or patient_status_code == '2' or patient_status_code == '4'] 
select mrn, '0' as location_code, ifThenElse(patient_status_code == '1' or patient_status_code == '4', false, true) as is_positive 
insert into Patient;

@info(name = 'query')
from PatientStream[patient_status_code == '6']#rdbms:query('DATABASE', 'hospital_id string', 'SELECT hospital_id FROM hospital_data LIMIT 1')
select mrn, hospital_id as location_code, true as is_positive
insert into Patient;

@info(name = 'SetZipAlert')
from ZipAlertInsertOrUpdateStream as s 
left outer join ZipAlert as alertTable 
select s.zipcode as zipcode, s.count as current_count, (s.count / coalesce(alertTable.current_count, cast(1, 'long'))) > 2 as on_alert 
update or 
insert into ZipAlert for current events 
	on ZipAlert.zipcode == zipcode;
